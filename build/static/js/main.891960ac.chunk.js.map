{"version":3,"sources":["router/Bundle.js","router/index.js","App.js","serviceWorker.js","index.js"],"names":["Bundle","props","state","mod","this","load","nextProps","setState","then","default","children","Component","Index","ChangeInfo","Release","UpdateArticle","ArticleDetail","ArticleList","Search","NotFound","Routers","exact","path","component","App","className","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gSAEqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,IAAK,MAHM,E,iEAQfC,KAAKC,KAAKD,KAAKH,S,gDAGOK,GAClBA,EAAUD,OAASD,KAAKH,MAAMI,MAC9BD,KAAKC,KAAKC,K,2BAIbL,GAAQ,IAAD,OACRG,KAAKG,SAAS,CACVJ,IAAK,OAGTF,EAAMI,OAAOG,MAAK,SAACL,GACf,EAAKI,SAAS,CACVJ,IAAKA,EAAIM,QAAUN,EAAIM,QAAUN,S,+BAMzC,OAAOC,KAAKF,MAAMC,IAAMC,KAAKH,MAAMS,SAASN,KAAKF,MAAMC,KAAO,S,GA/BlCQ,aCa9BC,EAAQ,SAACX,GAAD,OACV,kBAAC,EAAD,CAAQI,KAAM,kBAAM,8DACf,SAACO,GAAD,OAAW,kBAACA,EAAUX,OAIzBY,EAAa,SAACZ,GAAD,OACf,kBAAC,EAAD,CAAQI,KAAM,kBAAM,wDACf,SAACQ,GAAD,OAAgB,kBAACA,EAAeZ,OAInCa,EAAU,SAACb,GAAD,OACZ,kBAAC,EAAD,CAAQI,KAAM,kBAAM,+DACf,SAACS,GAAD,OAAa,kBAACA,EAAYb,OAI7Bc,EAAgB,SAACd,GAAD,OAClB,kBAAC,EAAD,CAAQI,KAAM,kBAAM,+DACf,SAACU,GAAD,OAAmB,kBAACA,EAAkBd,OAIzCe,EAAgB,SAACf,GAAD,OAClB,kBAAC,EAAD,CAAQI,KAAM,kBAAM,uDACf,SAACW,GAAD,OAAmB,kBAACA,EAAkBf,OAIzCgB,EAAc,SAAChB,GAAD,OAChB,kBAAC,EAAD,CAAQI,KAAM,kBAAM,uDACf,SAACY,GAAD,OAAiB,kBAACA,EAAgBhB,OAIrCiB,EAAS,SAACjB,GAAD,OACX,kBAAC,EAAD,CAAQI,KAAM,kBAAM,uDACf,SAACa,GAAD,OAAY,kBAACA,EAAWjB,OAI3BkB,EAAW,SAAClB,GAAD,OACb,kBAAC,EAAD,CAAQI,KAAM,kBAAM,kCACf,SAACc,GAAD,OAAc,kBAACA,EAAalB,OAIxBmB,EAAU,kBACnB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOU,KAAK,sBAAsBC,UAAWV,IAC7C,kBAAC,IAAD,CAAOS,KAAK,WAAWC,UAAWT,IAClC,kBAAC,IAAD,CAAOQ,KAAK,qCAAqCC,UAAWR,IAC5D,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,qCAAqCC,UAAWP,IAClE,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,qBAAqBC,UAAWN,IAClD,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,UAAUC,UAAWL,IACvC,kBAAC,IAAD,CAAOI,KAAK,IAAIC,UAAWJ,OClDxBK,E,kDAjBb,aAAe,IAAD,8BACZ,gBACKtB,MAAQ,GAFD,E,qDAQZ,OACE,yBAAKuB,UAAU,OACb,kBAAC,EAAD,W,GAXUC,IAAMf,WCOJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.891960ac.chunk.js","sourcesContent":["import  { Component } from 'react'\r\n\r\nexport default class Bundle extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mod: null\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.load(this.props)\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.load !== this.props.load) {\r\n            this.load(nextProps)\r\n        }\r\n    }\r\n\r\n    load(props) {\r\n        this.setState({\r\n            mod: null\r\n        });\r\n        //注意这里，使用Promise对象; mod.default导出默认\r\n        props.load().then((mod) => {\r\n            this.setState({\r\n                mod: mod.default ? mod.default : mod\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return this.state.mod ? this.props.children(this.state.mod) : null;\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// import Login from '../pages/Login'\n// import Register from '../pages/Register'\nimport Bundle from './Bundle'\n\n// import ChangeInfo from '../pages/ChangeInfo'\n// import Release from '../pages/Release'\n// import Index from '../pages/Index'\n// import NotFound from '../pages/NotFound'\n// import UpdateArticle from '../pages/UpdateArticle'\n// import ArticleDetail from '../pages/DetailArticle'\n// import ArticleList from '../pages/ArticleList'\n// import Search from '../pages/Search'\n\nconst Index = (props) => (\n    <Bundle load={() => import('../pages/Index')}>\n        {(Index) => <Index {...props} />}\n    </Bundle>\n);\n\nconst ChangeInfo = (props) => (\n    <Bundle load={() => import('../pages/ChangeInfo')}>\n        {(ChangeInfo) => <ChangeInfo {...props} />}\n    </Bundle>\n);\n\nconst Release = (props) => (\n    <Bundle load={() => import('../pages/Release')}>\n        {(Release) => <Release {...props} />}\n    </Bundle>\n);\n\nconst UpdateArticle = (props) => (\n    <Bundle load={() => import('../pages/UpdateArticle')}>\n        {(UpdateArticle) => <UpdateArticle {...props} />}\n    </Bundle>\n);\n\nconst ArticleDetail = (props) => (\n    <Bundle load={() => import('../pages/DetailArticle')}>\n        {(ArticleDetail) => <ArticleDetail {...props} />}\n    </Bundle>\n);\n\nconst ArticleList = (props) => (\n    <Bundle load={() => import('../pages/ArticleList')}>\n        {(ArticleList) => <ArticleList {...props} />}\n    </Bundle>\n);\n\nconst Search = (props) => (\n    <Bundle load={() => import('../pages/Search')}>\n        {(Search) => <Search {...props} />}\n    </Bundle>\n);\n\nconst NotFound = (props) => (\n    <Bundle load={() => import('../pages/NotFound')}>\n        {(NotFound) => <NotFound {...props} />}\n    </Bundle>\n);\n\nexport const Routers = () => (\n    <Router>\n        <Switch>\n            <Route exact path=\"/\" component={Index} />\n            <Route path=\"/userInfo/:username\" component={ChangeInfo} />\n            <Route path=\"/publish\" component={Release} />\n            <Route path=\"/updateArticle/:username/:topic_id\" component={UpdateArticle} />\n            <Route exact path=\"/articleDetail/:username/:topic_id\" component={ArticleDetail} />\n            <Route exact path=\"/article/:username\" component={ArticleList} />\n            <Route exact path=\"/search\" component={Search} />\n            <Route path=\"*\" component={NotFound} />\n        </Switch>\n    </Router>\n);","import React from 'react';\n\nimport { Routers } from './router/index'\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Routers />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'\nimport './assets/css/bootstrap.min.css'\n\nReactDOM.render(\n \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}